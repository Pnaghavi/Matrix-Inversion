<?xml version='1.0' encoding='UTF-8'?>

<bag xmlns:exsl="http://exslt.org/common" xmlns:int="http://www.w3.org/2001/XMLSchema#int" xmlns:str="http://exslt.org/strings" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <internal name="%GpuHotspotsViewpointName" description="%GpuHotspotsViewpointDescription" shortName="%GpuHotspotsViewpointShortName">
  <int:schemaVersion>1</int:schemaVersion>
  <int:contentVersion>6</int:contentVersion>
 </internal>
 <viewpoint xsl:version="1.0" exsl:keep_exsl_namespace="">
  <pane id="bottomUpPane" placeId="resultsArea"/>
  <pane id="summaryPane" placeId="resultsArea"/>
  <pane id="quickFilterPane" placeId="filterArea"/>
  <pane id="timelinePane" placeId="bottomArea"/>
  <pane id="gpuContextSummaryPane" placeId="sideArea"/>
  <pane id="taskTimelinePane" placeId="resultsArea"/>
  <pane id="stackPane" placeId="sideArea"/>
  <pane id="gpuTimelinePane" placeId="bottomArea"/>
  <pane id="gpuDiagramPane" placeId="bottomArea"/>
  <xsl:variable name="StacksCollected" select="(string($enableStackCollection) != 'false') or (string($enableVTSSCollection) != 'false') or (string($collectSamplesMode) = 'stack') or (string($collectWaitsMode) = 'stack')"/>
  <requiredData groupOperation="or">
   <queryRef>/GPUDXTime</queryRef>
   <queryRef>/GPUQueue</queryRef>
   <queryRef>/GPUComputeTask</queryRef>
   <queryRef>/ComputeQueue</queryRef>
   <queryRef>/GPUEventCount</queryRef>
   <queryRef>/GPUCoreFrequency</queryRef>
   <queryRef>/GPUNode</queryRef>
   <queryRef>/CPUGPUConcurrency</queryRef>
   <queryRef>/GPUElapsedTime</queryRef>
   <queryRef>/QueueDMAPacket</queryRef>
  </requiredData>
  <displayLayout>
   <tab id="summary">
    <masterPane id="summaryPane"/>
   </tab>
   <tab id="bottomBottomUpAndGPUMetrics">
    <displayName>%GraphicsTabName</displayName>
    <paneToShow id="bottomUpPane"/>
    <paneToShow id="quickFilterPane"/>
    <masterPane id="gpuTimelinePane"/>
    <xsl:if test="exsl:ctx('targetOS')='Windows' or exsl:ctx('targetOS')='Linux'">
     <xsl:if test="exsl:is_non_empty_table_exist('gpu_data')">
      <paneToShow id="gpuDiagramPane"/>
     </xsl:if>
    </xsl:if>
   </tab>
   <xsl:if test="not(exsl:is_non_empty_table_exist('gpu_gtpin_data'))">
    <tab id="tasks">
     <masterPane id="taskTimelinePane"/>
     <paneToShow id="quickFilterPane"/>
     <paneToShow id="gpuContextSummaryPane"/>
    </tab>
    <tab id="bottomUp">
     <masterPane id="bottomUpPane"/>
     <paneToShow id="timelinePane"/>
     <paneToShow id="quickFilterPane"/>
     <xsl:if test="$StacksCollected">
      <paneToShow id="stackPane"/>
     </xsl:if>
    </tab>
   </xsl:if>
   <defaultTab id="summary"/>
  </displayLayout>
  <diveLayout id="srcAsmPane" placeId="resultsArea">
   <xsl:if test="$StacksCollected">
    <paneToShow id="stackPane"/>
   </xsl:if>
  </diveLayout>
 </viewpoint>
 <paneLibrary xsl:version="1.0" exsl:keep_exsl_namespace="">
  <xsl:variable name="quickFilterPane">
   <params id="quickFilterPane" metrics="CPUTime" groupings="/Process/Thread/Module"/>
  </xsl:variable>
  <xsl:variable name="qfilterFileName">
   <xsl:text>config://viewpoint/include/filterbar.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($quickFilterPane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($qfilterFileName)"/>
  <xsl:variable name="gpuContextSummaryPane">
   <params id="gpuContextSummaryPane" contextMode="true" displayName="gpuContextSummaryWindow" description="gpuContextSummaryWindowDescription" showBandwidthUtilization="true" showBandwidth="true"/>
  </xsl:variable>
  <xsl:variable name="gpuContextSummaryFileName">
   <xsl:text>config://viewpoint/include/summarygpu.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($gpuContextSummaryPane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($gpuContextSummaryFileName)"/>
  <xsl:variable name="stackPane">
   <xsl:choose>
    <xsl:when test="exsl:ctx('runss:enable')='true'">
     <params layers="CPU"/>
    </xsl:when>
    <xsl:otherwise>
     <params layers="PMU/ContextSwitch"/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>
  <xsl:variable name="stackFileName">
   <xsl:text>config://viewpoint/include/stack.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($stackPane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($stackFileName)"/>
  <xsl:variable name="bottomUpPane">
   <params groupings="GPUGridRowBy" defaultGrouping="/GPUComputeTaskPurpose/GPUSourceComputeTask" sorting="MySorting" errorMessage="ErrorNoDataHotspots"/>
  </xsl:variable>
  <xsl:variable name="bottomUpFileName">
   <xsl:text>config://viewpoint/include/grid.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($bottomUpPane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($bottomUpFileName)"/>
  <xsl:variable name="summaryPane">
   <xsl:choose>
    <xsl:when test="exsl:ctx('runss:enable')='true'">
     <params description="HotspotsSummaryWindowDescription" resultSummaryColumns="MyDataColumns" querySuffix="CPU" showOpenMP="false" showCPUGPUUsage="true" showGPUHotspots="true" showBandwidthUtilization="true" showFrames="true" helpKeyWord="intel.phe.configs.summary_gpu_hotspots" summaryInfoMaxLevelsToShow="2"/>
    </xsl:when>
    <xsl:otherwise>
     <params description="LightweightHotspotsSummaryWindowDescription" querySuffix="PMU" showOpenMP="false" showCPUGPUUsage="true" showGPUHotspots="true" showBandwidth="true" showBandwidthUtilization="true" showInterrupts="true" showFrames="true" helpKeyWord="intel.phe.configs.summary_gpu_hotspots" summaryInfoMaxLevelsToShow="2"/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>
  <xsl:variable name="summaryFileName">
   <xsl:text>config://viewpoint/include/summarygpu.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($summaryPane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($summaryFileName)"/>
  <xsl:variable name="timelinePane">
   <xsl:choose>
    <xsl:when test="exsl:ctx('runss:enable')='true'">
     <params id="timelinePane" displayName="TimelineWindow" description="HotspotsTimelineWindowDescription" globalEventAreaName="CPUUsageOverTime" samplePointsQuery="CPUSample" samplePointsTooltipQuery="CPUFunctionFull" cpuDataQuery="CPUTime" cpuDataCumulativeQuery="CPUTimeAllCoresCumulative" taskQuery="Task" helpKeyword="configs.timeline_f1106" contextSwitches="true" rowByPrefix="CPU"/>
    </xsl:when>
    <xsl:otherwise>
     <params id="timelinePane" displayName="TimelineWindow" description="LightweightHotspotsTimelineWindowDescription" globalEventAreaName="RefTime" cpuDataQuery="RefTime" samplePointsQuery="PMUSample/RefTimeEvent" samplePointsTooltipQuery="PMUFunctionFull" cpuDataByThreadQuery="RefTimeByThread" cpuDataCumulativeQuery="RefTimeAllCoresCumulative" helpKeyword="configs.timeline_f1106" cpuOverheadAndSpinTimeQuery="PMUOverheadAndSpinTimeCapped" cpuOverheadAndSpinTimeCumulativeQuery="PMUOverheadAndSpinTimeAllCoresCumulative"/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>
  <xsl:variable name="timelinePaneFileName">
   <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($timelinePane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($timelinePaneFileName)"/>
  <xsl:variable name="taskTimelinePane">
   <xsl:choose>
    <xsl:when test="exsl:ctx('runss:enable')='true'">
     <params id="taskTimelinePane" displayName="TaskTimelineWithData" description="TaskTimelineWithDataDescription" tasksAndFrames="true" globalEventAreaName="CPUUsageOverTime" cpuDataQuery="CPUTime" cpuDataCumulativeQuery="CPUTimeAllCoresCumulative" contextSwitches="false" frameMode="frameDetailed" headerMode="rich" helpKeyword="configs.tasks_f1330" rowByPrefix="CPU"/>
    </xsl:when>
    <xsl:otherwise>
     <params id="taskTimelinePane" displayName="TaskTimelineWithData" description="TaskTimelineWithDataDescription" tasksAndFrames="true" globalEventAreaName="RefTime" cpuDataQuery="RefTime" cpuDataByThreadQuery="RefTimeByThread" cpuDataCumulativeQuery="RefTimeAllCoresCumulative" contextSwitches="true" frameMode="frameDetailed" headerMode="rich" helpKeyword="configs.tasks_f1330"/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>
  <xsl:variable name="taskTimelinePaneFileName">
   <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($taskTimelinePane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($taskTimelinePaneFileName)"/>
  <xsl:variable name="gpuTimelinePane">
   <xsl:choose>
    <xsl:when test="exsl:ctx('runss:enable')='true'">
     <params id="gpuTimelinePane" displayName="GPUTimelineWindow" description="HotspotsAndGPUTimelineWindowDescription" globalEventAreaName="CPUUsageOverTime" samplePointsQuery="CPUSample" samplePointsTooltipQuery="CPUFunctionFull" cpuDataQuery="CPUTime" cpuDataCumulativeQuery="CPUTimeAllCoresCumulative" taskQuery="Task" helpKeyword="configs.graphics_f1337" contextSwitches="false" gpu="true" gpuCounters="{$gpuCounters}" rowByPrefix="CPU"/>
    </xsl:when>
    <xsl:otherwise>
     <params id="gpuTimelinePane" displayName="GPUTimelineWindow" description="HotspotsAndGPUTimelineWindowDescription" globalEventAreaName="RefTime" cpuDataQuery="RefTime" samplePointsQuery="PMUSample/RefTimeEvent" samplePointsTooltipQuery="PMUFunctionFull" cpuDataByThreadQuery="RefTimeByThread" cpuDataCumulativeQuery="RefTimeAllCoresCumulative" helpKeyword="configs.graphics_f1337" gpu="true" gpuCounters="{$gpuCounters}" cpuOverheadAndSpinTimeQuery="PMUOverheadAndSpinTimeCapped" cpuOverheadAndSpinTimeCumulativeQuery="PMUOverheadAndSpinTimeAllCoresCumulative"/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>
  <xsl:variable name="gpuTimelinePaneFileName">
   <xsl:text>config://viewpoint/include/timeline.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($gpuTimelinePane)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:copy-of select="document($gpuTimelinePaneFileName)"/>
  <xsl:variable name="srcAsmPaneFileName">
   <xsl:choose>
    <xsl:when test="exsl:ctx('runss:enable')='true'">
     <xsl:text>config://viewpoint/include/srcasm.xsl?family=CPU&amp;gpu=true&amp;</xsl:text>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>config://viewpoint/include/srcasm.xsl?family=PMU&amp;gpu=true&amp;</xsl:text>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>
  <xsl:copy-of select="document($srcAsmPaneFileName)"/>
  <xsl:copy-of select="document('config://viewpoint/include/diagram.xsl')"/>
 </paneLibrary>
 <queryLibrary xsl:version="1.0" str:keep_str_namespace="" exsl:keep_exsl_namespace="">
  <vectorQuery id="MyDataColumns">
   <queryRef>/CPUGPUUsageElapsedTime/CPUGPUUsageUtilization</queryRef>
   <xsl:choose>
    <xsl:when test="exsl:IsNonEmptyTableExist('packet_stage_data')">
     <queryRef>/GpuCpuTime</queryRef>
    </xsl:when>
    <xsl:otherwise>
     <queryRef>/CPUTime</queryRef>
    </xsl:otherwise>
   </xsl:choose>
  </vectorQuery>
  <vectorQuery id="MySrcAsmColumns">
   <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
   <queryRef>/QuantumWaitTime</queryRef>
   <queryRef>/QuantumInactiveTime</queryRef>
  </vectorQuery>
  <vectorQuery id="MySummaryColumns">
   <vectorQueryInsert>/MyDataColumns</vectorQueryInsert>
  </vectorQuery>
  <vectorQuery id="ViewpointGUIandCLIColumns">
   <vectorQueryInsert>/RegionDataQueries</vectorQueryInsert>
   <vectorQueryInsert>/MySummaryColumns</vectorQueryInsert>
   <vectorQueryInsert>/CommonDataQueries</vectorQueryInsert>
   <queryRef>/ContextSwitchCountByReason</queryRef>
   <vectorQueryInsert>/GPUInfoQueries</vectorQueryInsert>
   <vectorQueryInsert>/GPUDataQueries</vectorQueryInsert>
   <queryRef>/GPUGTPinCyclesInPercentFormat</queryRef>
   <vectorQueryInsert>/GridInfoQueriesTail</vectorQueryInsert>
  </vectorQuery>
  <vectorQuery id="MySorting">
   <queryRef>/DataOfInterest</queryRef>
  </vectorQuery>
  <vectorQuery id="DataOfInterest">
   <queryRef>/CPUTime</queryRef>
  </vectorQuery>
  <infoQuery id="PMUEventTimeline" displayName="%PMUEventTimeline">
   <queryInherit>/PMUEventType</queryInherit>
  </infoQuery>
 </queryLibrary>
</bag>
