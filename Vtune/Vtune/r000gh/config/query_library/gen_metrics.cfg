<?xml version='1.0' encoding='UTF-8'?>

<bag xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean" xmlns:int="http://www.w3.org/2001/XMLSchema#int">
 <internal>
  <int:schemaVersion>1</int:schemaVersion>
  <int:contentVersion>1</int:contentVersion>
 </internal>
 <queryLibrary>
  <countQuery id="GPUEventCount" displayName="%UncoreEventCount">
   <instanceDbTable>gpu_data::dd_sample</instanceDbTable>
   <instanceBandTable>dd_gpu_node</instanceBandTable>
   <displayAttributes>
    <selfFormat>count</selfFormat>
    <boolean:allowCollapse>false</boolean:allowCollapse>
    <timelineObjectType>interval</timelineObjectType>
   </displayAttributes>
  </countQuery>
  <infoQuery id="GPUEventType" displayName="%UncoreEventType">
   <dbPath>gpu_data::dd_sample.uncore_event_type</dbPath>
   <displayDbPathSuffix>name</displayDbPathSuffix>
  </infoQuery>
  <derivedQuery id="GPUGpuTimeMetric" displayName="GPU Time Elapsed" description="Time elapsed on the GPU during the measurement.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[GpuTime]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGpuTimeMetricMaxValue"/>
  <derivedQuery id="GPUGpuCoreClocksMetric" displayName="GPU Core Clocks" description="The total number of GPU core clocks elapsed during the measurement.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGpuCoreClocksMetricMaxValue"/>
  <derivedQuery id="GPUAvgGpuCoreFrequencyMHzMetric" displayName="AVG GPU Core Frequency" description="Average GPU Core Frequency in the measurement.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 1000) / query(&quot;/GPUEventCount/GPUEventType[GpuTime]&quot;))</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUAvgGpuCoreFrequencyMHzMetricMaxValue"/>
  <derivedQuery id="GPUVsThreadsMetric" displayName="VS Threads Dispatched" description="The total number of vertex shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[VsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUVsThreadsMetricMaxValue"/>
  <derivedQuery id="GPUHsThreadsMetric" displayName="HS Threads Dispatched" description="The total number of hull shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[HsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUHsThreadsMetricMaxValue"/>
  <derivedQuery id="GPUDsThreadsMetric" displayName="DS Threads Dispatched" description="The total number of domain shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[DsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUDsThreadsMetricMaxValue"/>
  <derivedQuery id="GPUGsThreadsMetric" displayName="GS Threads Dispatched" description="The total number of geometry shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[GsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGsThreadsMetricMaxValue"/>
  <derivedQuery id="GPUPsThreadsMetric" displayName="PS Threads Dispatched" description="The total number of pixel shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[PsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUPsThreadsMetricMaxValue"/>
  <derivedQuery id="GPUCsThreadsMetric" displayName="CS Threads Dispatched" description="The total number of compute shader hardware threads dispatched.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[CsThreads]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUCsThreadsMetricMaxValue"/>
  <derivedQuery id="GPUGpuBusyMetric" displayName="GPU Busy" description="The percentage of time in which the GPU has been processing GPU commands.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[GpuBusy]&quot;) / query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 100)) / 100</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGpuBusyMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUEuActiveMetric" displayName="EU Active" description="The percentage of time in which the Execution Units were actively processing.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[EuActive]&quot;) / ($gpuEuCoresTotalCount * query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)) * 100)) / 100</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUEuActiveMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUEuStallMetric" displayName="EU Stall" description="The percentage of time in which the Execution Units were stalled.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[EuStall]&quot;) / ($gpuEuCoresTotalCount * query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)) * 100)) / 100</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUEuStallMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUEuFpuBothActiveMetric" displayName="EU Both FPU Pipes Active" description="The percentage of time in which both EU FPU pipelines were actively processing.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[EuFpuBothActive]&quot;) / ($gpuEuCoresTotalCount * query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)) * 100)) / 100</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUEuFpuBothActiveMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUVsFpu0ActiveMetric" displayName="VS FPU0 Pipe Active" description="The percentage of time in which EU FPU0 pipeline was actively processing a vertex shader instruction.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[VsFpu0Active]&quot;) / ($gpuEuCoresTotalCount * query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)) * 100)) / 100</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUVsFpu0ActiveMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUVsFpu1ActiveMetric" displayName="VS FPU1 Pipe Active" description="The percentage of time in which EU FPU1 pipeline was actively processing a vertex shader instruction.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[VsFpu1Active]&quot;) / ($gpuEuCoresTotalCount * query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)) * 100)) / 100</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUVsFpu1ActiveMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUVsSendActiveMetric" displayName="VS Send Pipe Active" description="The percentage of time in which EU send pipeline was actively processing a vertex shader instruction.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[VsSendActive]&quot;) / ($gpuEuCoresTotalCount * query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)) * 100)) / 100</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUVsSendActiveMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUPsFpu0ActiveMetric" displayName="PS FPU0 Pipe Active" description="The percentage of time in which EU FPU0 pipeline was actively processing a pixel shader instruction.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[PsFpu0Active]&quot;) / ($gpuEuCoresTotalCount * query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)) * 100)) / 100</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUPsFpu0ActiveMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUPsFpu1ActiveMetric" displayName="PS FPU1 Pipe Active" description="The percentage of time in which EU FPU1 pipeline was actively processing a pixel shader instruction.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[PsFpu1Active]&quot;) / ($gpuEuCoresTotalCount * query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)) * 100)) / 100</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUPsFpu1ActiveMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUPsSendActiveMetric" displayName="PS Send Pipeline Active" description="The percentage of time in which EU send pipeline was actively processing a pixel shader instruction.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[PsSendActive]&quot;) / ($gpuEuCoresTotalCount * query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)) * 100)) / 100</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUPsSendActiveMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUPsEuBothFpuActiveMetric" displayName="PS Both FPU Active" description="The percentage of time in which pixel shaders were processed actively on the both FPUs.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[PsEuBothFpuActive]&quot;) / ($gpuEuCoresTotalCount * query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;)) * 100)) / 100</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUPsEuBothFpuActiveMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSampler0BusyMetric" displayName="Sampler 0 Busy" description="The percentage of time in which Sampler 0 has been processing EU requests.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[Sampler0Busy]&quot;) / query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 100)) / 100</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSampler0BusyMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSampler1BusyMetric" displayName="Sampler 1 Busy" description="The percentage of time in which Sampler 1 has been processing EU requests.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[Sampler1Busy]&quot;) / query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 100)) / 100</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSampler1BusyMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplersBusyMetric" displayName="Samplers Busy" description="The percentage of time in which samplers have been processing EU requests.">
   <valueEval>((query(&quot;/GPUSampler1BusyMetric&quot;) &gt; query(&quot;/GPUSampler0BusyMetric&quot;)) ? query(&quot;/GPUSampler1BusyMetric&quot;) : query(&quot;/GPUSampler0BusyMetric&quot;))</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplersBusyMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSampler0BottleneckMetric" displayName="Sampler 0 Bottleneck" description="The percentage of time in which Sampler 0 has been slowing down the pipe when processing EU requests.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[Sampler0Bottleneck]&quot;) / query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 100)) / 100</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSampler0BottleneckMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSampler1BottleneckMetric" displayName="Sampler 1 Bottleneck" description="The percentage of time in which Sampler 1 has been slowing down the pipe when processing EU requests.">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[Sampler1Bottleneck]&quot;) / query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 100)) / 100</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSampler1BottleneckMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
  <derivedQuery id="GPURasterizedPixelsMetric" displayName="Rasterized Pixels" description="The total number of rasterized pixels.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[RasterizedPixels]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPURasterizedPixelsMetricMaxValue"/>
  <derivedQuery id="GPUHiDepthTestFailsMetric" displayName="Early Hi-Depth Test Fails" description="The total number of pixels dropped on early hierarchical depth test.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[HiDepthTestFails]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUHiDepthTestFailsMetricMaxValue"/>
  <derivedQuery id="GPUEarlyDepthTestFailsMetric" displayName="Early Depth Test Fails" description="The total number of pixels dropped on early depth test.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[EarlyDepthTestFails]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUEarlyDepthTestFailsMetricMaxValue"/>
  <derivedQuery id="GPUSamplesKilledInPsMetric" displayName="Samples Killed in PS" description="The total number of samples or pixels dropped in pixel shaders.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SamplesKilledInPs]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplesKilledInPsMetricMaxValue"/>
  <derivedQuery id="GPUPixelsFailingPostPsTestsMetric" displayName="Pixels Failing Tests" description="The total number of pixels dropped on post-PS alpha, stencil, or depth tests.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[PixelsFailingPostPsTests]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUPixelsFailingPostPsTestsMetricMaxValue"/>
  <derivedQuery id="GPUSamplesWrittenMetric" displayName="Samples Written" description="The total number of samples or pixels written to all render targets.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SamplesWritten]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplesWrittenMetricMaxValue"/>
  <derivedQuery id="GPUSamplesBlendedMetric" displayName="Samples Blended" description="The total number of blended samples or pixels written to all render targets.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SamplesBlended]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplesBlendedMetricMaxValue"/>
  <derivedQuery id="GPUSamplerTexelsMetric" displayName="Sampler Texels" description="The total number of texels seen on input (with 2x2 accuracy) in all sampler units.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SamplerTexels]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplerTexelsMetricMaxValue"/>
  <derivedQuery id="GPUSamplerTexelMissesMetric" displayName="Sampler Texels Misses" description="The total number of texels lookups (with 2x2 accuracy) that missed L1 sampler cache.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SamplerTexelMisses]&quot;) * 4)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplerTexelMissesMetricMaxValue"/>
  <derivedQuery id="GPUSamplerL1MissesMetric" displayName="Sampler Cache Misses" description="The total number of sampler cache misses in all LODs in all sampler units.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[SamplerL1Misses]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplerL1MissesMetricMaxValue"/>
  <derivedQuery id="GPUSlmBytesReadMetric" displayName="SLM Bytes Read" description="The total number of GPU memory bytes read from shared local memory.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SlmBytesRead]&quot;) * 64) / 1000000000</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSlmBytesReadMetricMaxValue">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 64) * $gpuEuSubslicesTotalCount)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSlmBytesWrittenMetric" displayName="SLM Bytes Written" description="The total number of GPU memory bytes written into shared local memory.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SlmBytesWritten]&quot;) * 64) / 1000000000</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSlmBytesWrittenMetricMaxValue">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 64) * $gpuEuSubslicesTotalCount)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUShaderMemoryAccessesMetric" displayName="Shader Memory Accesses" description="The total number of shader memory accesses to L3.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[ShaderMemoryAccesses]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUShaderMemoryAccessesMetricMaxValue"/>
  <derivedQuery id="GPUShaderAtomicsMetric" displayName="Shader Atomic Memory Accesses" description="The total number of shader atomic memory accesses.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[ShaderAtomics]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUShaderAtomicsMetricMaxValue"/>
  <derivedQuery id="GPUL3LookupsMetric" displayName="L3 Lookup Accesses w/o IC" description="The total number of L3 cache lookup accesses w/o IC.">
   <valueEval>(query(&quot;/GPUSamplerL1MissesMetric&quot;) + query(&quot;/GPUShaderMemoryAccessesMetric&quot;))</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUL3LookupsMetricMaxValue"/>
  <derivedQuery id="GPUL3MissesMetric" displayName="L3 Misses" description="The total number of L3 misses.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[L3Misses]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUL3MissesMetricMaxValue"/>
  <derivedQuery id="GPUL3SamplerThroughputMetric" displayName="L3 Sampler Throughput" description="The total number of GPU memory bytes transferred between samplers and L3 caches.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SamplerL1Misses]&quot;) * 64) / 1000000000</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUL3SamplerThroughputMetricMaxValue">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 64) * $gpuEuSlicesTotalCount)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUL3ShaderThroughputMetric" displayName="L3 Shader Throughput" description="The total number of GPU memory bytes transferred between shaders and L3 caches w/o URB.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[SlmBytesRead]&quot;) + (query(&quot;/GPUEventCount/GPUEventType[SlmBytesWritten]&quot;) + (query(&quot;/GPUEventCount/GPUEventType[ShaderMemoryAccesses]&quot;) * 64))) / 1000000000</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUL3ShaderThroughputMetricMaxValue">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 64) * $gpuEuSlicesTotalCount)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUShaderBarriersMetric" displayName="Shader Barrier Messages" description="The total number of shader barrier messages.">
   <valueEval>query(&quot;/GPUEventCount/GPUEventType[ShaderBarriers]&quot;)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUShaderBarriersMetricMaxValue"/>
  <derivedQuery id="GPUGtiVfThroughputMetric" displayName="GTI Fixed Pipe Throughput" description="The total number of GPU memory bytes transferred between 3D Pipeline (Command Dispatch, Input Assembly and Stream Output) and GTI.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[GtiVfThroughput]&quot;) * 64) / 1000000000</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiVfThroughputMetricMaxValue">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 64)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiDepthThroughputMetric" displayName="GTI Depth Throughput" description="The total number of GPU memory bytes transferred between depth caches and GTI.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[GtiDepthThroughput]&quot;) * 64) / 1000000000</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiDepthThroughputMetricMaxValue">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 64) * $gpuEuSlicesTotalCount)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiRccThroughputMetric" displayName="GTI RCC Throughput" description="The total number of GPU memory bytes transferred between render color caches and GTI.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[GtiRccThroughput]&quot;) * 64) / 1000000000</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiRccThroughputMetricMaxValue">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 64) * $gpuEuSlicesTotalCount)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiL3ThroughputMetric" displayName="GTI L3 Throughput" description="The total number of GPU memory bytes transferred between L3 caches and GTI.">
   <valueEval>(query(&quot;/GPUL3MissesMetric&quot;) * 64) / 1000000000</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiL3ThroughputMetricMaxValue">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 64) * $gpuEuSlicesTotalCount)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiHdcLookupsThroughputMetric" displayName="GTI HDC TLB Lookup Throughput" description="The total number of GPU memory bytes transferred between GTI and HDC, when HDC is doing TLB lookups.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[GtiHdcLookupsThroughput]&quot;) * 64) / 1000000000</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiHdcLookupsThroughputMetricMaxValue">
   <valueEval>((query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 64) * $gpuEuSlicesTotalCount)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiReadThroughputMetric" displayName="GTI Read Throughput" description="The total number of GPU memory bytes read from GTI.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[GtiReadThroughput]&quot;) * 64) / 1000000000</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiReadThroughputMetricMaxValue">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 64)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiWriteThroughputMetric" displayName="GTI Write Throughput" description="The total number of GPU memory bytes written to GTI.">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[GtiWriteThroughput]&quot;) * 64) / 1000000000</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUGtiWriteThroughputMetricMaxValue">
   <valueEval>(query(&quot;/GPUEventCount/GPUEventType[GpuCoreClocks]&quot;) * 32)</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplerBottleneckMetric" displayName="Samplers Bottleneck" description="The percentage of time in which samplers have been slowing down the pipe when processing EU requests.">
   <valueEval>((query(&quot;/GPUSampler1BottleneckMetric&quot;) &gt; query(&quot;/GPUSampler0BottleneckMetric&quot;)) ? query(&quot;/GPUSampler1BottleneckMetric&quot;) : query(&quot;/GPUSampler0BottleneckMetric&quot;))</valueEval>
  </derivedQuery>
  <derivedQuery id="GPUSamplerBottleneckMetricMaxValue">
   <valueEval>1</valueEval>
  </derivedQuery>
 </queryLibrary>
</bag>
